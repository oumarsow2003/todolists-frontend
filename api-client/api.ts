/* tslint:disable */
/* eslint-disable */
/**
 * Todo API
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface Def0
 */
export interface Def0 {
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'name'?: string;
    /**
     * 
     * @type {string}
     * @memberof Def0
     */
    'description'?: string;
}
/**
 * 
 * @export
 * @interface Def1
 */
export interface Def1 {
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'id': string;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'title': string;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'description': string;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'etat': string;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'date': string;
    /**
     * 
     * @type {string}
     * @memberof Def1
     */
    'listId': string;
}
/**
 * All lists have been successfully deleted
 * @export
 * @interface ListsDelete200Response
 */
export interface ListsDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof ListsDelete200Response
     */
    'result'?: string;
}
/**
 * 
 * @export
 * @interface ListsGet200ResponseInner
 */
export interface ListsGet200ResponseInner {
    /**
     * 
     * @type {string}
     * @memberof ListsGet200ResponseInner
     */
    'id'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListsGet200ResponseInner
     */
    'name'?: string;
    /**
     * 
     * @type {Array<Def1>}
     * @memberof ListsGet200ResponseInner
     */
    'items'?: Array<Def1>;
}
/**
 * The list has been successfully updated
 * @export
 * @interface ListsIdPut200Response
 */
export interface ListsIdPut200Response {
    /**
     * 
     * @type {string}
     * @memberof ListsIdPut200Response
     */
    'message'?: string;
}
/**
 * The item has been successfully deleted
 * @export
 * @interface ListsListIdItemsItemIdDelete200Response
 */
export interface ListsListIdItemsItemIdDelete200Response {
    /**
     * 
     * @type {string}
     * @memberof ListsListIdItemsItemIdDelete200Response
     */
    'message'?: string;
}
/**
 * The item has been successfully updated
 * @export
 * @interface ListsListIdItemsItemIdPut200Response
 */
export interface ListsListIdItemsItemIdPut200Response {
    /**
     * 
     * @type {string}
     * @memberof ListsListIdItemsItemIdPut200Response
     */
    'message'?: string;
    /**
     * 
     * @type {Def1}
     * @memberof ListsListIdItemsItemIdPut200Response
     */
    'updatedItem'?: Def1;
}
/**
 * The item has been successfully added
 * @export
 * @interface ListsListIdItemsPost201Response
 */
export interface ListsListIdItemsPost201Response {
    /**
     * 
     * @type {string}
     * @memberof ListsListIdItemsPost201Response
     */
    'message'?: string;
    /**
     * 
     * @type {string}
     * @memberof ListsListIdItemsPost201Response
     */
    'listId'?: string;
}
/**
 * The list has been successfully created
 * @export
 * @interface ListsPost201Response
 */
export interface ListsPost201Response {
    /**
     * 
     * @type {string}
     * @memberof ListsPost201Response
     */
    'message'?: string;
    /**
     * 
     * @type {object}
     * @memberof ListsPost201Response
     */
    'result'?: object;
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/items/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsPost: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/items/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.itemsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async itemsPost(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.itemsPost(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.itemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async rootGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<void>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.rootGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.rootGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.itemsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        itemsPost(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.itemsPost(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        rootGet(options?: RawAxiosRequestConfig): AxiosPromise<void> {
            return localVarFp.rootGet(options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public itemsGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).itemsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public itemsPost(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).itemsPost(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public rootGet(options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).rootGet(options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ItemsApi - axios parameter creator
 * @export
 */
export const ItemsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete an item from a specific list
         * @param {string} listId The ID of the list
         * @param {string} itemId The ID of the item to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdItemsItemIdDelete: async (listId: string, itemId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('listsListIdItemsItemIdDelete', 'listId', listId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('listsListIdItemsItemIdDelete', 'itemId', itemId)
            const localVarPath = `/lists/{listId}/items/{itemId}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an item in a specific list
         * @param {string} listId The ID of the list
         * @param {string} itemId The ID of the item to update
         * @param {Def1} [def1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdItemsItemIdPut: async (listId: string, itemId: string, def1?: Def1, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('listsListIdItemsItemIdPut', 'listId', listId)
            // verify required parameter 'itemId' is not null or undefined
            assertParamExists('listsListIdItemsItemIdPut', 'itemId', itemId)
            const localVarPath = `/lists/{listId}/items/{itemId}`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)))
                .replace(`{${"itemId"}}`, encodeURIComponent(String(itemId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(def1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Add an item to a specific list
         * @param {string} listId The ID of the list to which the item belongs
         * @param {Def1} [def1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdItemsPost: async (listId: string, def1?: Def1, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'listId' is not null or undefined
            assertParamExists('listsListIdItemsPost', 'listId', listId)
            const localVarPath = `/lists/{listId}/items/`
                .replace(`{${"listId"}}`, encodeURIComponent(String(listId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(def1, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ItemsApi - functional programming interface
 * @export
 */
export const ItemsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ItemsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete an item from a specific list
         * @param {string} listId The ID of the list
         * @param {string} itemId The ID of the item to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsListIdItemsItemIdDelete(listId: string, itemId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsListIdItemsItemIdDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsListIdItemsItemIdDelete(listId, itemId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.listsListIdItemsItemIdDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an item in a specific list
         * @param {string} listId The ID of the list
         * @param {string} itemId The ID of the item to update
         * @param {Def1} [def1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsListIdItemsItemIdPut(listId: string, itemId: string, def1?: Def1, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsListIdItemsItemIdPut200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsListIdItemsItemIdPut(listId, itemId, def1, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.listsListIdItemsItemIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Add an item to a specific list
         * @param {string} listId The ID of the list to which the item belongs
         * @param {Def1} [def1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsListIdItemsPost(listId: string, def1?: Def1, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsListIdItemsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsListIdItemsPost(listId, def1, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ItemsApi.listsListIdItemsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ItemsApi - factory interface
 * @export
 */
export const ItemsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ItemsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete an item from a specific list
         * @param {string} listId The ID of the list
         * @param {string} itemId The ID of the item to delete
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdItemsItemIdDelete(listId: string, itemId: string, options?: RawAxiosRequestConfig): AxiosPromise<ListsListIdItemsItemIdDelete200Response> {
            return localVarFp.listsListIdItemsItemIdDelete(listId, itemId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an item in a specific list
         * @param {string} listId The ID of the list
         * @param {string} itemId The ID of the item to update
         * @param {Def1} [def1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdItemsItemIdPut(listId: string, itemId: string, def1?: Def1, options?: RawAxiosRequestConfig): AxiosPromise<ListsListIdItemsItemIdPut200Response> {
            return localVarFp.listsListIdItemsItemIdPut(listId, itemId, def1, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Add an item to a specific list
         * @param {string} listId The ID of the list to which the item belongs
         * @param {Def1} [def1] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsListIdItemsPost(listId: string, def1?: Def1, options?: RawAxiosRequestConfig): AxiosPromise<ListsListIdItemsPost201Response> {
            return localVarFp.listsListIdItemsPost(listId, def1, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ItemsApi - object-oriented interface
 * @export
 * @class ItemsApi
 * @extends {BaseAPI}
 */
export class ItemsApi extends BaseAPI {
    /**
     * 
     * @summary Delete an item from a specific list
     * @param {string} listId The ID of the list
     * @param {string} itemId The ID of the item to delete
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public listsListIdItemsItemIdDelete(listId: string, itemId: string, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).listsListIdItemsItemIdDelete(listId, itemId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an item in a specific list
     * @param {string} listId The ID of the list
     * @param {string} itemId The ID of the item to update
     * @param {Def1} [def1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public listsListIdItemsItemIdPut(listId: string, itemId: string, def1?: Def1, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).listsListIdItemsItemIdPut(listId, itemId, def1, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Add an item to a specific list
     * @param {string} listId The ID of the list to which the item belongs
     * @param {Def1} [def1] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ItemsApi
     */
    public listsListIdItemsPost(listId: string, def1?: Def1, options?: RawAxiosRequestConfig) {
        return ItemsApiFp(this.configuration).listsListIdItemsPost(listId, def1, options).then((request) => request(this.axios, this.basePath));
    }
}



/**
 * ListsApi - axios parameter creator
 * @export
 */
export const ListsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete all todo lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsDelete: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Retrieve all lists along with their items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGet: async (options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Update an existing todo list
         * @param {string} id The ID of the list to update
         * @param {Def0} [def0] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdPut: async (id: string, def0?: Def0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'id' is not null or undefined
            assertParamExists('listsIdPut', 'id', id)
            const localVarPath = `/lists/{id}`
                .replace(`{${"id"}}`, encodeURIComponent(String(id)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'PUT', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(def0, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create a new todo list
         * @param {Def0} [def0] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost: async (def0?: Def0, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/lists/`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(def0, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ListsApi - functional programming interface
 * @export
 */
export const ListsApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = ListsApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete all todo lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsDelete(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsDelete200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsDelete(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsDelete']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Retrieve all lists along with their items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsGet(options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<Array<ListsGet200ResponseInner>>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsGet(options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsGet']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Update an existing todo list
         * @param {string} id The ID of the list to update
         * @param {Def0} [def0] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsIdPut(id: string, def0?: Def0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsIdPut200Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsIdPut(id, def0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsIdPut']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create a new todo list
         * @param {Def0} [def0] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listsPost(def0?: Def0, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<ListsPost201Response>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listsPost(def0, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['ListsApi.listsPost']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * ListsApi - factory interface
 * @export
 */
export const ListsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = ListsApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete all todo lists
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsDelete(options?: RawAxiosRequestConfig): AxiosPromise<ListsDelete200Response> {
            return localVarFp.listsDelete(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Retrieve all lists along with their items
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsGet(options?: RawAxiosRequestConfig): AxiosPromise<Array<ListsGet200ResponseInner>> {
            return localVarFp.listsGet(options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Update an existing todo list
         * @param {string} id The ID of the list to update
         * @param {Def0} [def0] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsIdPut(id: string, def0?: Def0, options?: RawAxiosRequestConfig): AxiosPromise<ListsIdPut200Response> {
            return localVarFp.listsIdPut(id, def0, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create a new todo list
         * @param {Def0} [def0] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listsPost(def0?: Def0, options?: RawAxiosRequestConfig): AxiosPromise<ListsPost201Response> {
            return localVarFp.listsPost(def0, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ListsApi - object-oriented interface
 * @export
 * @class ListsApi
 * @extends {BaseAPI}
 */
export class ListsApi extends BaseAPI {
    /**
     * 
     * @summary Delete all todo lists
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsDelete(options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsDelete(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Retrieve all lists along with their items
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsGet(options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsGet(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Update an existing todo list
     * @param {string} id The ID of the list to update
     * @param {Def0} [def0] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsIdPut(id: string, def0?: Def0, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsIdPut(id, def0, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create a new todo list
     * @param {Def0} [def0] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ListsApi
     */
    public listsPost(def0?: Def0, options?: RawAxiosRequestConfig) {
        return ListsApiFp(this.configuration).listsPost(def0, options).then((request) => request(this.axios, this.basePath));
    }
}



